<?php
/**
 * Created by PhpStorm.
 * User: joshgulledge
 * Date: 9/28/18
 * Time: 3:58 PM
 */

namespace LCI\Salsify\Helpers;

use phpseclib\File\X509;

/**
 * Class Webhooks
 * @see https://developers.salsify.com/docs/digital-asset-webhooks
 * @see https://developers.salsify.com/v1.0/reference#webhook-signature-headers
 * @see https://help.salsify.com/help/setting-up-product-change-alerts-in-salsify
 *
 * @package LCI\Salsify\Helpers
 */
class Webhooks
{
    /** @var string  */
    const EXPECTED_CERTIFICATE_HOST = 'webhooks-auth.salsify.com';

    /** @var int in seconds */
    protected $max_request_age = 300;

    /** @var string  */
    protected $webhook_url = 'https://mydomain.com/my-webhook';

    // Headers:
    /** @var string X-Salsify-Signature-V1 - Base64 encoded digital signature generated by Salsify for the request. */
    protected $signature = '';

    /** @var string X-Salsify-Cert-Url - URL to an X.509 public key certificate that should be used to verify the digital signature. */
    protected $cert_url = '';

    /** @var int X-Salsify-Timestamp - Unix timestamp that records when the request was sent. */
    protected $timestamp = 0;

    /** @var string X-Salsify-Request-ID - Unique id of the event that triggered the webhook request. Note: this ID does not change when requests are retried. */
    protected $request_id = '';

    /** @var string  */
    protected $request_body = '';

    /** @var string X-Salsify-Organization-ID - Salsify organization ID associated with the event.
     * the organization ID which is unique to each Salsify app instance. The org ID can be found after /orgs/ in the
     * URL path for your Salsify organization, eg. in https://app.salsify.com/app/orgs/9-99999-9999-9999-9999-999999999/products
     * the org ID is 9-99999-9999-9999-9999-999999999.
     */
    protected $organization_id = '';

    /** @var bool  */
    protected $valid_request = true;

    /**
     * Webhooks constructor.
     * @param string $organization_id
     * @param string $webhook_url - the URL that has been set in Salsify
     * @param int $max_request_age - in seconds, recommended is 300 (5 minutes)
     */
    public function __construct(string $organization_id, string $webhook_url, int $max_request_age=300)
    {
        $this->organization_id = $organization_id;
        $this->webhook_url = $webhook_url;
        $this->max_request_age = $max_request_age;
    }

    /**
     * @param string $signature
     * @return Webhooks
     */
    public function setSignature(string $signature): Webhooks
    {
        $this->signature = $signature;
        return $this;
    }

    /**
     * @param string $cert_url
     * @return Webhooks
     */
    public function setCertUrl(string $cert_url): Webhooks
    {
        $this->cert_url = $cert_url;
        return $this;
    }

    /**
     * @param int $timestamp
     * @return Webhooks
     */
    public function setTimestamp(int $timestamp): Webhooks
    {
        $this->timestamp = $timestamp;
        return $this;
    }

    /**
     * @param string $request_id
     * @return Webhooks
     */
    public function setRequestId(string $request_id): Webhooks
    {
        $this->request_id = $request_id;
        return $this;
    }

    /**
     * @param string $request_body
     * @return Webhooks
     */
    public function setRequestBody(string $request_body): Webhooks
    {
        $this->request_body = $request_body;
        return $this;
    }

    /**
     * @return bool
     */
    public function verifyRequest()
    {
        return $this
            ->validTimestamp()
            ->validCertificateUrl()
            ->validSignature()
            ->valid_request;
    }

    protected function validTimestamp()
    {
        if ($this->max_request_age < time() - $this->timestamp) {
            $this->valid_request = false;
        }

        return $this;
    }

    protected function validCertificateUrl()
    {
        /** @var array|false $uri */
        $uri = parse_url($this->cert_url);

        if (is_array($uri)) {
            if ($uri['scheme'] != 'https') {
                $this->valid_request = false;
            }
            if ($uri['host'] != self::EXPECTED_CERTIFICATE_HOST) {
                $this->valid_request = false;
            }

        } else {
            $this->valid_request = false;
        }

        return $this;
    }

    protected function validSignature()
    {
        if ($this->valid_request && 1==1) {
            // @TODO
            echo $this->cert_url.PHP_EOL;

            /** @var X509 $x509 */
            $x509 = new X509();

            /** @var array $cert */
            $cert = $x509->loadX509($this->cert_url);

            $cert['signature'];

            $x509->validateSignature();

            print_r($cert);

            $signature = base64_decode($cert['signature']);

            echo $signature.PHP_EOL;

            if ($signature != $this->makeHeaderString()) {
                $this->valid_request = false;
                echo __METHOD__.' Failed' . __LINE__.PHP_EOL;
            }

            /* verify the signature
            $cert->public_key->verify(
                OpenSSL::Digest::SHA256.new,
                Base64.strict_decode64(signature),
                signature_data
              );
            */
        }

        return $this;
    }

    protected function makeHeaderString()
    {
        return hash('sha256', "{$this->timestamp}.{$this->request_id}.{$this->organization_id}.{$this->webhook_url}.{$this->request_body}");
    }



}